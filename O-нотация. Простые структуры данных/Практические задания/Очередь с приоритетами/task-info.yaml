type: edu
files:
  - name: task.py
    visible: true
    placeholders:
      - offset: 280
        length: 147
        placeholder_text: "...  # TODO использовать deque для реализации очереди с при\
      оритетами"
        initial_state:
          length: 68
          offset: 258
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          self.priority_queue: dict[int, deque] = {
                      priority: deque() for priority in range(self.HIGH_PRIORITY, self.LOW_PRIORITY + 1)
                  }
        selected: true
        status: Solved
      - offset: 723
        length: 69
        placeholder_text: "...  # TODO реализовать метод enqueue"
        initial_state:
          length: 37
          offset: 601
        initialized_from_dependency: false
        encrypted_possible_answer: "self.priority_queue[priority].append(elem)"
        selected: true
        status: Solved
      - offset: 1032
        length: 159
        placeholder_text: "...  # TODO реализовать метод dequeue"
        initial_state:
          length: 37
          offset: 862
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          for queue in self.priority_queue.values():
                      if queue:
                          return queue.popleft()
          
                  raise IndexError("Извлечение из пустой очереди не возможно")
        selected: true
        status: Solved
      - offset: 1907
        length: 67
        placeholder_text: "...  # TODO реализовать метод peek"
        initial_state:
          length: 34
          offset: 1467
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          if not isinstance(ind, int):
                      raise TypeError(f"Индекс должен быть целочисленного типа, а не {type(ind).__name__}")
          
                  queue = self.priority_queue[priority]
                  if not 0 <= ind < len(queue):
                      raise IndexError("Индекс все границ очереди")
          
                  return queue[ind]
        selected: true
        status: Solved
      - offset: 2046
        length: 46
        placeholder_text: "...  # TODO реализовать метод clear"
        initial_state:
          length: 35
          offset: 1573
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          for queue in self.priority_queue.values():
                      queue.clear()
        selected: true
        status: Solved
      - offset: 2173
        length: 18
        placeholder_text: "...  # TODO реализовать метод __len__"
        initial_state:
          length: 37
          offset: 1689
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          len_ = 0
                  for queue in self.priority_queue.values():
                      len_ += len(queue)
          
                  return len_
        selected: true
        status: Solved
    learner_created: false
  - name: tests/test_task.py
    visible: false
    learner_created: false
  - name: __init__.py
    visible: false
    learner_created: false
  - name: tests/__init__.py
    visible: false
    learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 03 Jun 2025 16:43:40 UTC"
record: -1
